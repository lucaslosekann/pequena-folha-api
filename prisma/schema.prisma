// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Partner {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  image       Bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id             Int      @id @default(autoincrement())
  isAdmin        Boolean  @default(false)
  email          String   @unique
  name           String
  password       String?
  phone          String
  address        String
  houseResidents Int
  addressDetails String
  active         Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  submissions    Form[]
}

model Agenda {
  id             Int            @id @default(autoincrement())
  dateTime       DateTime
  place          String
  type           String
  description    String         @db.LongText
  additionalText String?        @db.LongText
  eventsImages   EventsImages[]
}

model EventsImages {
  id      Int   @id @default(autoincrement())
  eventId Int
  image   Bytes

  Agenda Agenda @relation(fields: [eventId], references: [id])
}

model Form {
  id                        Int                    @id @default(autoincrement())
  userId                    Int
  date                      DateTime
  inorganicVolume           String
  inorganicWeight           Int
  inorganicDescriptionOther String?
  organicVolume             String
  organicWeight             Int
  organicDescriptionOther   String?
  wastes                    String
  wastesVolume              String
  residueComposition        FormImage[]
  inorganicDescription      InorganicDescription[]
  organicDescription        OrganicDescription[]

  User      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InorganicDescription {
  id     Int    @id @default(autoincrement())
  text   String
  formId Int
  form   Form   @relation(fields: [formId], references: [id], onDelete: Cascade)
}

model OrganicDescription {
  id     Int    @id @default(autoincrement())
  text   String
  formId Int
  form   Form   @relation(fields: [formId], references: [id], onDelete: Cascade)
}

enum FormImageType {
  ORGANIC
  INORGANIC
  WASTE
}

model FormImage {
  id        Int           @id @default(autoincrement())
  image     Bytes
  formId    Int
  type      FormImageType
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  Form Form @relation(fields: [formId], references: [id])
}
